1:www.github.com 创建账号,和创建一个项目..   

2: 安装git   $:apt-get install git git-core

3:生成创建密匙

$:ssh-keygen -t rsa -C "xxx@gmail.com"

会生成在~/.ssh 目录下面.

在 github.com 的界面中 选择右上角的 Account Settings，然后选择 SSH Public Keys ，选择新加。

Title 可以随便命名，Key 的内容拷贝自 ~/.ssh/id_rsa.pub 中的内容，完成后，可以再使用 ssh -v git@github.com 进行测试。看到下面的信息表示验证成功。

Hi xxx! You've successfully authenticated, but GitHub does not provide 

4: 创建一个本地仓库

设置Git全局用户配置
 git config --global user.name "xxx"
git config --global user.email xxx@gmail.com

mkdir new ; cd new  ; git init ; git add . ;git commit -m 'first commit'

定义远程服务器别名origin
#  git remote add origin git@github.com:xxx/new-project.git   
本地和远程合并，本地默认分支为master
# git push origin master  
GitHub网站上就可以看见了， http://github.com/xxx/new-project

 

9. 更新文件
# vi README
自动commit更改文件
# git commit -a     
更新至远程
# git push origin master

10. 创建和合并分支
#git branch 显示当前分支是master
#git branch new-feature  创建分支
# git checkout new-feature 切换到新分支
# vi page_cache.inc.php
# git add page_cache.inc.php
Commit 到本地GIT
# git commit -a -m "added initial version of page cache"
合并到远程服务器
# git push origin new-feature

如果new-feature分支成熟了，觉得有必要合并进master
#git checkout master
#git merge new-feature
#git branch
#git push 
则master中也合并了new-feature 的代码

再登录到GitHub可以看见"Switch Branches"下的分支选项

 

下面是一些比较有用的命令的介绍：

 
# 创建一个版本库

git init 

# 每次修改好了后，可以先将修改存入stage(快照/索引)中

git add <modified files>

# 修改了大量文件则使用下面这个命令批量存入

git add . 

# 使用commit将快照/索引中的内容提交到版本库中

git commit -m"msg"

# 也可以将git add与git commit用一个指令完成

git commit -a-m"msg"

# 将本地的git档案与github(远程)上的同步 

git push 

# 将github(远程)的git档案与本地的同步(即更新本地端的repo) 

git pull 

# 例如,pull指令其实包含了fetch(將变更复制回來)以及merge(合并)操作

git pull git://github.com/tom/test.git   

 

# 另外版本控制系統的branch功能也很有意思，若同时修改bug，又要加入新功能，可以fork出一个branch：一个专门修bug，一个专门加入新功能，等到稳定后再merge合并

git branch bug_fix  # 建立branch，名为bug_fix 

git checkout bug_fix # 切换到bug_fix

git checkout master  #切换到主要的repo 

git merge bug_fix  #把bug_fix这个branch和现在的branch合并   

 

# 若有remote的branch，想要查看并checkout

git branch -r# 查看远程branch

git checkout -b bug_fix_local bug_fix_remote #把本地端切换为远程的bug_fix_remote branch并命名为bug_fix_local   

 

# 还有其它可以查看repo状态的工具 

git log #可以查看每次commit的改变

git diff#可以查看最近一次改变的內容，加上参数可以看其它的改变并互相比较 

git show #可以看某次的变更   

# 若想知道目前工作树的状态，可以輸入

git status
